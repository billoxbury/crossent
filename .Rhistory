mn <- s
i0 <- i
j0 <- j
}
}
# return
list(sub=i0:j0, val=-log(s))
}
p <- c(0.009, 0.01, 0.011)
fal(p, 0.01)$sub
bill(p, 0.01)
fisher(p)
p <- runif(10)
p
fal(p, 0.01)$sub
bill(p, 0.01)
bill(p, 0.5)
fisher(p)
bill(p, 1)
bill(p, 10)
p <- runif(10)
fal(p, 0.01)$sub
bill(p, 10)
fisher(p)
bill(p, 1)
fisher(p)
bill(p, 0.1)
fisher(p)
fal(p, 0.01)$sub
p <- 0.2 * runif(10)
fal(p, 0.01)$sub
bill(p, 0.1)
fisher(p)
bill(p, 0.01)
fisher(p)
p
p <- 0.3 * runif(20)
fal(p, 0.01)$sub
bill(p, 0.01)
fisher(p)
p
bill(p, 0.1)
fal(p, 0.1)$sub
bill(p, 0.1)
p
bill(p, 1)
bill(p, 10)
bill(p, 0)
p
fal(p, 0.1)$sub
fal(p, 0.01)$sub
fal(p, 0.05)$sub
p <- c(0.009, 0.011, 0.011)
fal(p, 0.01)$sub
bill(p, 0.01)
fisher(p)
p <- 0.3 * runif(5)
fal(p, 0.01)$sub
bill(p, 0.01)
fisher(p)
p
p[5] = 0.01
fisher(p)
bill(p, 0.01)
fal(p, 0.01)$sub
p
p[5] = 0.08
p[3] = 0.01
p
fal(p, 0.01)$sub
bill(p, 0.01)
fisher(p)
p[3] = 0.02
p
bill(p, 0.01)
fal(p, 0.01)$sub
plot(p)
p[3] = 0.04
plot(p)
bill(p, 0.01)
p[3] = 0.03
plot(p)
bill(p, 0.01)
p <- 0.3 * runif(50)
plot(p, type='b')
bill(p, 1)
fisher(p)
fal(p, 0.01)$sub
p <- 0.3 * runif(50)
plot(p, type='b')
p <- 0.3 * runif(50)
plot(p, type='b')
p <- 0.3 * runif(50)
plot(p, type='b')
p <- 0.3 * runif(50)
plot(p, type='b')
bill(p, 0.01)
file <- "/Users/wmoxbury/DATASETS/polblogs/polblogs.gml"
library(igraph)
g <- read.graph(file, format="gml")
cc <- clusters(g)
cc$no
cc$csize
# giant component:
gcc <- subgraph(g, V(g)[cc$membership == 1])
# adjacency matrix:
A <- get.adjacency(gcc, sparse=FALSE)
image(1 - A)
k <- 4 # nr blocks
n <- nrow(A)
h <- floor(n/k)
bmem <- sample(1:k, n, replace=TRUE)
binheights <- function(bmem){
m <- matrix(nrow=k, ncol=k)
# mask <- matrix(sapply(1:n^2, function(k){ (k-1)%%n < floor((k-1)/n)}), nrow=n, ncol=n)
for(a in 1:k)
for(b in 1:k){
inc <- ((bmem==a) %*% t(bmem==b)) # * mask
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
}
obj <- function(bmem){
m <- binheights(bmem)
out <- 0
for(i in 1:(n-1))
for(j in (i+1):n)
out <- out + A[i,j]*log(m[bmem[i], bmem[j]]) + (1 - A[i,j])*log(1 - m[bmem[i], bmem[j]])
# return:
out
}
dyn.load("objective.so")
m <- binheights(bmem)
m
k <- 2 # nr blocks
n <- nrow(A)
h <- floor(n/k)
bmem <- sample(1:k, n, replace=TRUE)
bmem <- 1:floor(n/2)
binheights <- function(bmem){
m <- matrix(nrow=k, ncol=k)
# mask <- matrix(sapply(1:n^2, function(k){ (k-1)%%n < floor((k-1)/n)}), nrow=n, ncol=n)
for(a in 1:k)
for(b in 1:k){
inc <- ((bmem==a) %*% t(bmem==b)) # * mask
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
}
m <- binheights(bmem)
bmem <- rep(2,n); bmem[1:floor(n/2)] <- 1
bmem
m <- matrix(nrow=k, ncol=k)
m <- matrix(nrow=k, ncol=k)
# mask <- matrix(sapply(1:n^2, function(k){ (k-1)%%n < floor((k-1)/n)}), nrow=n, ncol=n)
for(a in 1:k)
for(b in 1:k){
inc <- ((bmem==a) %*% t(bmem==b)) # * mask
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
bmem <- sample(1:k, n, replace=TRUE)
m <- matrix(nrow=k, ncol=k)
# mask <- matrix(sapply(1:n^2, function(k){ (k-1)%%n < floor((k-1)/n)}), nrow=n, ncol=n)
for(a in 1:k)
for(b in 1:k){
inc <- ((bmem==a) %*% t(bmem==b)) # * mask
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
m <- binheights(bmem)
out <- 0
for(i in 1:(n-1))
for(j in (i+1):n)
out <- out + A[i,j]*log(m[bmem[i], bmem[j]]) + (1 - A[i,j])*log(1 - m[bmem[i], bmem[j]])
# return:
out
plot(g)
source(""/Users/wmoxbury/DATASETS/Zachary\ karate/karate.R")
source("/Users/wmoxbury/DATASETS/Zachary\ karate/karate.R")
zachc
ls()
xcc
source(""/Users/wmoxbury/DATASETS/Zachary\ karate/karate.R")
zache
g <- adjacency.graph(zache)
g <- graph.adjacency(zache)
g
cc <- clusters(g)
cc$no
cc$csize
# giant component:
gcc <- subgraph(g, V(g)[cc$membership == 1])
cc
A <- get.adjacency(gcc, sparse=FALSE)
image(1 - A)
plot(g)
k <- 2 # nr blocks
n <- nrow(A)
h <- floor(n/k)
bmem <- sample(1:k, n, replace=TRUE)
bmem <- rep(2,n); bmem[1:floor(n/2)] <- 1
m <- matrix(nrow=k, ncol=k)
# mask <- matrix(sapply(1:n^2, function(k){ (k-1)%%n < floor((k-1)/n)}), nrow=n, ncol=n)
for(a in 1:k)
for(b in 1:k){
inc <- ((bmem==a) %*% t(bmem==b)) # * mask
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
binheights2 <- function(A, bmem){
n <- nrow(A)
numer <- matrix(0, nrow=k, ncol=k)
denom <- matrix(0, nrow=k, ncol=k)
for(i in 1:(n-1))
for(j in i:n){
a <- bmem[i]; b <- bmem[j]
numer[a,b] <- numer[a,b] + A[i,j]
denom[a,b] <- denom[a,b] + 1
}
# return:
numer / denom
}
binheights2(A,bmem)
binheights2 <- function(A, bmem){
n <- nrow(A)
numer <- matrix(0, nrow=k, ncol=k)
denom <- matrix(0, nrow=k, ncol=k)
for(i in 1:(n-1))
for(j in i:n){
a <- bmem[i]; b <- bmem[j]
numer[a,b] <- numer[a,b] + A[i,j]
denom[a,b] <- denom[a,b] + 1
}
# return:
out <- numer / denom
(out + t(out))/2
}
binheights2(A,bmem)
binheights2 <- function(A, bmem){
n <- nrow(A)
numer <- matrix(0, nrow=k, ncol=k)
denom <- matrix(0, nrow=k, ncol=k)
for(i in 1:n)
for(j in 1:n){
if(i==j) next
a <- bmem[i]; b <- bmem[j]
numer[a,b] <- numer[a,b] + A[i,j]
denom[a,b] <- denom[a,b] + 1
}
# return:
numer / denom
}
binheights2(A,bmem)
binheights1 <- function(A, bmem){
m <- matrix(nrow=k, ncol=k)
for(a in 1:k)
for(b in 1:k){
inc <- ((bmem==a) %*% t(bmem==b)) # * mask
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
}
binheights1(A,bmem)
binheights2(A,bmem)
?system.time
system.time(binheights2(A,bmem))
system.time(binheights1(A,bmem))
g <- read.graph(file, format="gml")
cc <- clusters(g)
cc$no
cc$csize
# giant component:
gcc <- subgraph(g, V(g)[cc$membership == 1])
# adjacency matrix:
A <- get.adjacency(gcc, sparse=FALSE)
k <- 2 # nr blocks
n <- nrow(A)
h <- floor(n/k)
bmem <- sample(1:k, n, replace=TRUE)
system.time(binheights1(A,bmem))
system.time(binheights2(A,bmem))
binheights1(A,bmem)
binheights2(A,bmem)
a = 1
b = 1
inc <- ((bmem==a) %*% t(bmem==b))
inc
?outer
outer(bmem==a, bmem==b)
outer(bmem==a, bmem==b)
inc <- outer(bmem==a, bmem==b) #((bmem==a) %*% t(bmem==b))
dim(inc)
sum(inc)
m <- matrix(nrow=k, ncol=k)
for(a in 1:k)
for(b in 1:k){
inc <- outer(bmem==a, bmem==b)
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
binheights1 <- function(A, bmem){
m <- matrix(nrow=k, ncol=k)
for(a in 1:k)
for(b in 1:k){
inc <- outer(bmem==a, bmem==b)
m[a,b] <- sum(A * inc)/sum(inc)
}
# return:
m
}
binheights2 <- function(A, bmem){
m <- matrix(nrow=k, ncol=k)
sapply(1:k, function(a){
sapply(1:k, function(b){
inc <- outer(bmem==a, bmem==b)
m[a,b] <- sum(A * inc)/sum(inc)
})
})
# return:
m
}
binheights1(A, bmem)
binheights2(A, bmem)
binheights2 <- function(A, bmem){
m <- matrix(nrow=k, ncol=k)
sapply(1:k, function(a){
sapply(1:k, function(b){
inc <- outer(bmem==a, bmem==b);
m[a,b] <- sum(A * inc)/sum(inc)
})
})
# return:
m
}
binheights2(A, bmem)
path <- "/Users/wmoxbury/Work/deeplearning/word2vec/"
classfile <- "classes.txt"
freqfile <- "wcounts.txt"
dat1 <- read.table(sprintf("%s%s", path, classfile))
names(dat1) <- c("word", "class")
dat2 <- read.table(sprintf("%s%s", path, freqfile), row.names=NULL)
names(dat2) <- c("freq", word")
print(1)
))))))
shiny::runApp('Blog/ec2/201507mnist/mnist-1.0')
path <- "/Users/wmoxbury/Work/deeplearning/word2vec/"
classfile <- "classes.txt"
freqfile <- "wcounts.txt"
vecfile <- "vectors.txt"
dat1 <- read.table(sprintf("%s%s", path, classfile))
names(dat1) <- c("word", "class")
dat2 <- read.table(sprintf("%s%s", path, freqfile), row.names=NULL)
names(dat2) <- c("freq", "word")
dat2$freq <- as.numeric(dat2$freq)
dat3 <- read.table(sprintf("%s%s", path, vecfile))
names(dat3)[1] <- "word"
dat4 <- merge(dat1, dat2)
alldat <- merge(dat3, dat4)
attach(alldat)
dim(alldat)
names(alldat)
summary(word)
summary(freq)
library(wordcloud)
cls <- 457
wordcloud(word[class==cls], freq[class==cls])
install.packages("wordcloud")
library(wordcloud)
cls <- 457
wordcloud(word[class==cls], freq[class==cls])
cls <- 458
wordcloud(word[class==cls], freq[class==cls])
cls <- 459
wordcloud(word[class==cls], freq[class==cls])
wordcloud(word[class==cls], 1)
wordcloud(word[class==cls], rep(1, sum(class==cls)))
cls <- 460
wordcloud(word[class==cls], rep(1, sum(class==cls)))
cls <- 461
wordcloud(word[class==cls], rep(1, sum(class==cls)))
cls <- 462
wordcloud(word[class==cls], rep(1, sum(class==cls)))
wordcloud(word[class==cls], freq[class==cls])
cls <- 463
wordcloud(word[class==cls], freq[class==cls])
wordcloud(word[class==cls], 1/freq[class==cls])
cls <- 464
wordcloud(word[class==cls], 1/freq[class==cls])
size <- 5000
common <- alldat[rev(order(freq))[64:(63+size)],]
rare <- alldat[order(freq)[1:size],]
sampled <- alldat[sample(1:nrow(alldat), size),]
print( common$word )
size <- 6000
common <- alldat[rev(order(freq))[64:(63+size)],]
rare <- alldat[order(freq)[1:size],]
sampled <- alldat[sample(1:nrow(alldat), size),]
print( common$word )
print(rare$word)
hist(common$class, col='grey', breaks=500)
subdat <- common
search()
installed.packages()
rownames(installed.packages())
"h2o" %in% rownames(installed.packages())
install.packages("h2o")
install.packages("h2o")
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/rel-kahan/5/R", getOption("repos"))))
install.packages("h2o")
library(h2o)
localH2O = h2o.init()
demo(h2o.glm)
par()
par(mai=rep(1,4))
demo(h2o.glm)
y <- apply(iris[,1:4],2,sum)
y
iris.hex <-  h2o.uploadFile(localH2O, path = system.file("extdata", "iris.csv", package="h2o"), key = "iris.hex")
summary(iris.hex)
library(h2o)                # Load H2O library
localH2O = h2o.init()       # initial H2O locl instance
# Upload iris file from the H2O package into the H2O local instance
iris.hex <-  h2o.uploadFile(localH2O, path = system.file("extdata", "iris.csv", package="h2o"), key = "iris.hex")
summary(iris.hex)
iris.hex <-  h2o.uploadFile(localH2O, path = system.file("extdata", "iris.csv", package="h2o"), key = "iris.hex")
?system.file
getClusterSizes()
install.packages("RSpark")
install.packages("SparkR")
library(SparkR)
shiny::runApp('Blog/ec2/201508wikiwords/wikiwords-1.0')
?uninstall.packages
?install.packages
library("tsne", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:utils", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:datasets", unload=TRUE)
install.packages(c("base64enc", "boot", "class", "cluster", "codetools", "curl", "devtools", "doParallel", "dplyr", "evaluate", "fields", "foreach", "foreign", "formatR", "git2r", "h2o", "highr", "httpuv", "irlba", "iterators", "jsonlite", "KernSmooth", "lattice", "manipulate", "mapproj", "maps", "maptools", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "packrat", "PKI", "quantmod", "R6", "Rcpp", "roxygen2", "rpart", "scales", "shiny", "sp", "spam", "spatial", "statmod", "stringi", "survival", "TDA", "xml2"))
shiny::runApp('Blog/ec2/201508wikiwords/wikiwords-1.0')
library(igraph)
?"igraph"
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
install.packages("Rstan")
install.packages("RStan")
install.packages("rstan")
library(rstan)
?"rstan"
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
?fluidRow
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
?sidebarPanel
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
library(shiny)
?addPopover
?"shiny"
library(shinyBS)
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
?shinyBS
?shinyBS
?%>%
shiny::runApp('Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0')
setwd("~/Blog/ec2/_INPROGRESS_201512netflow/netflow-2.0")
load("data/box_profiles_20151206.Rds")
g <- graph.edgelist(as.matrix(edges[,1:2]))
V(g)$name[1:10]
degree(g)[1:10]
edges[1:10,]
tmp <- aggregate(edges$nflows, src, sum)
tmp <- aggregate(edges$nflows, edges$src, sum)
tmp <- aggregate(edges$nflows, list(edges$src), sum)
tmp
tmp <- aggregate(edges$dst, list(edges$src), c)
tmp[1,]
tmp <- aggregate(as.character(edges$dst), list(edges$src), c)
tmp[1,]
edges[edges$src=="C10",]
tmp <- aggregate(edges, list(edges$src), data.frame)
shiny::runApp()
